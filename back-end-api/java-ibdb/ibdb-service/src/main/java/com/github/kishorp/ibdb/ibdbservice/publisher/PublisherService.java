package com.github.kishorp.ibdb.ibdbservice.publisher;

import com.github.kishorp.ibdb.ibdbdomain.dto.PublisherDto;
import com.github.kishorp.ibdb.ibdbservice.error.IbdbServiceException;

import java.util.List;

/**
 * <li> PublisherService had methods defined to perform various operations on "publishers" collection. </li>
 */
public interface PublisherService {

    /**
     * <li> Returns all Publishers matching the provided params Name & Email</li>
     * <li> If no Params provided it simply returns all the available list of Publishers</li>
     *
     * @param name Name based on which the Publishers need to be filtered.
     * @param email Email based on which the publishers need to eb filtered.
     * @return List of Publishers matching the filters provided as params.
     */
    List<PublisherDto> fetchAllPublishers(String name, String email);

    /**
     * <li> Fetches an individual Publisher based on ID </li>
     *
     * @param id ID of publisher
     * @return Found publisher
     * @throws IbdbServiceException Error: ERR_01_404_03 is thrown if no publishers is found by the specified ID
     */
    PublisherDto fetchPublisherById(String id) throws IbdbServiceException;

    /**
     * <li> Adds a new Publisher to the "publishers" collection </li>
     *
     * @param newPublisherDto New Publisher that need to be created
     * @return Created PublisherDto with proper ID generated by DB
     * @throws IbdbServiceException
     *  <li> ERR_01_409_01 is thrown if another Publisher with same Name is available </li>
     *  <li> ERR_01_409_02 is thrown if another Publisher with same Email is available </li>
     */
    PublisherDto addNewPublisher(PublisherDto newPublisherDto) throws IbdbServiceException;

    /**
     * <li> Updates an existing Publisher with provided one. </li>
     * <li> If no Publisher with the provided ID is found, then it creates a NEW one</li>
     *
     * @param publisherDto Publisher that need to be updated
     * @return Updated PublisherDto with proper ID generated by DB
     * @throws IbdbServiceException
     *  <li> ERR_01_409_01 is thrown if another Publisher with same Name is available </li>
     *  <li> ERR_01_409_02 is thrown if another Publisher with same Email is available </li>
     */
    PublisherDto updatePublisher(PublisherDto publisherDto) throws IbdbServiceException;

    /**
     * <li> Deletes an Existing Publisher based on ID  </li>
     * @param id ID of the publisher that need to be deleted
     */
    void deletePublisherById(String id);


}
